generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  isGuest   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions      Session[]
  questionStats QuestionStat[]
  studySessions StudySession[]
  notes         Note[]
}

model Topic {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  questions   Question[]
}

model Question {
  id           Int            @id @default(autoincrement())
  topicId      String
  refId        Int?           // Reference ID from original PDF (1-100, repeats across topics)
  questionText String
  optionA      String
  optionB      String
  optionC      String
  optionD      String
  correctAnswer String
  explanation  String
  difficulty   Int            @default(1)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?      @updatedAt

  topic        Topic          @relation(fields: [topicId], references: [id], onDelete: Cascade)
  stats        QuestionStat[]
  sessionItems SessionItem[]
}

model QuestionStat {
  id             String   @id @default(cuid())
  userId         String
  questionId     Int
  timesAnswered  Int      @default(0)
  timesCorrect   Int      @default(0)
  lastAnswered   DateTime?
  nextReview     DateTime?
  easeFactor     Float    @default(2.5)
  interval       Int      @default(1)
  repetitions    Int      @default(0)
  isStarred      Boolean  @default(false) // User can star questions for prioritization

  // Anki Algorithm Fields
  state          String   @default("new") // new, learning, review, relearning, suspended
  currentStep    Int      @default(0)     // Current position in learning/relearning steps
  lapses         Int      @default(0)     // Number of times this card has failed
  lastReviewDate DateTime?               // When card was last reviewed (different from lastAnswered)

  user     User     @relation(fields: [userId], references: [id])
  question Question @relation(fields: [questionId], references: [id])

  @@unique([userId, questionId])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id])
}

model StudySession {
  id          String        @id @default(cuid())
  userId      String
  startedAt   DateTime      @default(now())
  completedAt DateTime?
  score       Float?
  
  user  User          @relation(fields: [userId], references: [id])
  items SessionItem[]
}

model SessionItem {
  id            String       @id @default(cuid())
  sessionId     String
  questionId    Int
  userAnswer    String?
  isCorrect     Boolean?
  answeredAt    DateTime?
  timeSpent     Int?
  
  session  StudySession @relation(fields: [sessionId], references: [id])
  question Question     @relation(fields: [questionId], references: [id])
}

model Note {
  id         String   @id @default(cuid())
  userId     String
  questionId Int
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id])
}